# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'RSA.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTextEdit, QPlainTextEdit


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(615, 457)
        MainWindow.setIconSize(QtCore.QSize(30, 30))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(150, 10, 350, 61))
        self.label.setScaledContents(False)
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(270, 230, 81, 31))
        self.label_2.setObjectName("label_2")

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(270, 320, 81, 31))
        self.label_3.setObjectName("label_3")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(90, 170, 93, 28))
        self.pushButton.setObjectName("pushButton")
        # проверка события кнопки
        self.pushButton.clicked.connect(self.value_input)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(420, 170, 101, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        # проверка события кнопки
        self.pushButton_2.clicked.connect(self.value_output)

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(220, 70, 191, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        # проверка события кнопки
        self.pushButton_3.clicked.connect(self.file_name_output)

        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(30, 210, 221, 181))
        self.textBrowser.setObjectName("textBrowser_2")

        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(360, 210, 221, 181))
        self.textBrowser_2.setObjectName("textBrowser_3")

        self.textBrowser_3 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_3.setGeometry(QtCore.QRect(240, 110, 151, 26))
        self.textBrowser_3.setObjectName("textBrowser_3")

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)

        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # вызовы собственных функций
        self.value()
        self.value_out()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                                    "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n "
                                                    "<html><head><meta name=\"qrichtext\" content=\"1\" /><style "
                                                    "type=\"text/css\">\n "
                                                    "p, li { white-space: pre-wrap; }\n"
                                                    "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"
                                                    "<p align=\"center\" style=\" margin-top:12px; "
                                                    "margin-bottom:12px; margin-left:0px; margin-right:0px; "
                                                    "-qt-block-indent:0; text-indent:0px;\"><span style=\" "
                                                    "font-size:26pt; color:#000000;\">Диффи-Хеллмана</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:11pt; font-weight:600;\"> ― ― "
                                        "―&gt;</span></p></body></html>"))
        self.label_3.setText(_translate("MainWindow",
                                        "<html><head/><body><p><span style=\" font-size:11pt; "
                                        "font-weight:600;\">&lt;― ― ―</span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Зашифровать"))
        self.pushButton_2.setText(_translate("MainWindow", "Расшифровать"))
        self.pushButton_3.setText(_translate("MainWindow", "Входящий текстовый документ"))

    def value(self):
        self.txt = QTextEdit(self.textBrowser)

    def value_input(self):
        # чтение и вывод файла
        with open("input.txt", mode='r') as file:

            message = file.read()

            # вызываются методы для подсчета частичных(закрытых) ключей. Они всегда будут разные
            e_partial = Eric.generate_partial_key()
            print(e_partial)
            m_partial = Michael.generate_partial_key()
            print(m_partial)
            # передаются в метод частичные ключи, чтобы из них сделать полные. PS: они всегда должны совпадать
            e_full = Eric.generate_full_key(m_partial)
            print(e_full)
            m_full = Michael.generate_full_key(e_partial)
            print(m_full)

            self.m_encrypted = Michael.encrypt_message(message)
            print(self.m_encrypted)
            self.txt.setPlainText(self.m_encrypted)




    def value_out(self):
        self.txt2 = QTextEdit(self.textBrowser_2)


    def value_output(self):
        message = Eric.decrypt_message(self.m_encrypted)
        self.txt2.setPlainText(message)

    def file_name(self):
        self.name = QTextEdit(self.textBrowser_3)

    def file_name_output(self):
        self.textBrowser_3.setText("input.txt")

class DiffHell(object):
    # инициализируются переменные публичных ключей, а полный ключ ставится в значение none. Все переменные берутся
    # при ихобъявлении. Напрмиер public_key1 будет равен 20, public_key2 30 и тд. смотря что мы передаем в класс. С
    # начала мы передаем

    def __init__(self, public_key1, public_key2, private_key):
            self.public_key1 = public_key1
            self.public_key2 = public_key2
            self.private_key = private_key
            self.full_key = None

    # функция для генерации частичного ключа. ** - возведение в степень. % - остаток от деления
    def generate_partial_key(self):
            partial_key = self.public_key1 ** self.private_key
            partial_key = partial_key % self.public_key2
            return partial_key

    # дейтсвия те же самые
    def generate_full_key(self, partial_key_r):
            full_key = partial_key_r ** self.private_key
            full_key = full_key % self.public_key2
            self.full_key = full_key
            return full_key

    # шифровка ключа, после получения сообщения message. Ключ будет равен полному, а каждый символ кодируется в целое
    # число, добавляется значение ключа, а затем целое число преобразуется обратно в символ, именно поэтому я включил
    # ord, это символы из таблицы символов Unicode. Это будет повторяться для каждого символа в сообщении. В шифровании
    # используется добавление значения ключа, а в расшифровке, метод которой будет ниже - вычитается и на входе имеется
    # расшифрованное Майклом сообщение
    def encrypt_message(self, message):
            encrypted_message = ""
            key = self.full_key
            for c in message:
                encrypted_message += chr(ord(c) + key)
            return encrypted_message

    def decrypt_message(self, encrypted_message):
            decrypted_message = ""
            key = self.full_key
            for c in encrypted_message:
                decrypted_message += chr(ord(c) - key)
            return decrypted_message


if __name__ == "__main__":
    import sys

    # создание открытых и закрытых ключей, обычно числа больше
    e_public = 3231
    e_private = 4351
    m_public = 657
    m_private = 2342
    Eric = DiffHell(e_public, m_public, e_private)
    Michael = DiffHell(e_public, m_public, m_private)

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
